# This is a basic workflow to help you get started with Actionsddd

name: CI

# Controls when the workflow will run
on: push

  # Allows you to run this workflow manually from the Actions tab

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  rest:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/github-script@v6
        env:
          GITHUB_RUN_ATTEMPT: '${{ github.run_attempt }}'
        with:
          script: |

            const { data } = await github.rest.actions.listJobsForWorkflowRunAttempt({
              ...context.repo,
              run_id: context.runId,
              attempt_number: process.env.GITHUB_RUN_ATTEMPT,
            });

            const url = data.jobs[0].html_url

            const response = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "f3fda8828b1dab312e962550b2312c2e8cfa59b1"
            })

            core.info(JSON.stringify(response))

            const empty = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "f303e5d392d2593f2bdfb6a1d1878fb7895b1024"
            })

            core.info(JSON.stringify(empty))

            const empty2 = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "f3fda8828b1dab312e962550b2312c2e8cfa59b1"
            })

            core.info(JSON.stringify(empty2))

            const empty3 = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "f3fda8828b1dab312e962550b2312c2e8cfa59b1"
            })

            core.info(JSON.stringify(empty3));

            const start = new Date();
            const end = new Date().setSeconds(start.getSeconds() + 1);
            const iwk = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: "a126953c24be5a2592bcc2d573a061a9d2fcb74c",
              name: "build",
              status: "completed",
              // Careful, code injection can happen.
              conclusion: "success",
              started_at: start.toISOString(),
              completed_at: end.toISOString(),
              details_url: url
            });

            core.info(JSON.stringify(iwk));



            const empty4 = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "bb6c86a2d90d6337f67fbfea885451b4faab4937"
            })

            core.info(JSON.stringify(empty4))



      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo '${{ toJSON(github.event) }}'
